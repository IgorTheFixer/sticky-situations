// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  features    Feature[] // A project has many features
}

model Feature {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userStories UserStory[]  // A feature has many user stories
}

model UserStory {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  featureId   String
  feature     Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  tasks       Task[]   // A user story has many tasks
  bugs        Bug[]    // A user story has many bugs
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   // E.g., "To Do", "In Progress", "Done"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userStoryId String
  userStory   UserStory @relation(fields: [userStoryId], references: [id], onDelete: Cascade)
}

model Bug {
  id          String   @id @default(uuid())
  title       String
  description String?
  priority    String   // E.g., "Low", "Medium", "High"
  status      String   // E.g., "Open", "Resolved", "Closed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userStoryId String
  userStory   UserStory @relation(fields: [userStoryId], references: [id], onDelete: Cascade)
}
